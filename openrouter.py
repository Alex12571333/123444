import asyncio
import logging
import re

import httpx
from config import OPENROUTER_API_KEY, MODEL, PROMPT_STYLE

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è retry –ª–æ–≥–∏–∫–∏
MAX_RETRIES = 3
RETRY_DELAY = 2  # —Å–µ–∫—É–Ω–¥—ã
RATE_LIMIT_DELAY = 10  # —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ 429

TELEGRAM_ALLOWED_TAGS = {"b", "i", "u", "code", "pre"}


async def _call_openrouter(messages, timeout=60):
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ OpenRouter API —Å retry –ª–æ–≥–∏–∫–æ–π
    """
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}", "Content-Type": "application/json"}
    data = {"model": MODEL, "messages": messages}
    
    for attempt in range(MAX_RETRIES):
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if attempt > 0:
                await asyncio.sleep(RETRY_DELAY)
            
            async with httpx.AsyncClient() as client:
                logger.info(f"Sending request to OpenRouter model: {MODEL} (attempt {attempt + 1}/{MAX_RETRIES})")
                response = await client.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    json=data,
                    headers=headers,
                    timeout=timeout,
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 429 –æ—à–∏–±–∫—É
                if response.status_code == 429:
                    logger.warning(f"Rate limited (429) on attempt {attempt + 1}/{MAX_RETRIES}")
                    if attempt < MAX_RETRIES - 1:
                        await asyncio.sleep(RATE_LIMIT_DELAY)
                        continue
                    else:
                        logger.error(f"Rate limit exceeded after {MAX_RETRIES} attempts")
                        return 'RATE_LIMIT_429'
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 500 –æ—à–∏–±–∫—É
                if response.status_code == 500:
                    logger.warning(f"Server error (500) on attempt {attempt + 1}/{MAX_RETRIES}")
                    if attempt < MAX_RETRIES - 1:
                        await asyncio.sleep(RETRY_DELAY * 2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è 500 –æ—à–∏–±–æ–∫
                        continue
                    else:
                        logger.error(f"Server error persisted after {MAX_RETRIES} attempts")
                        return None
                
                response.raise_for_status()
                content = response.json()["choices"][0]["message"]["content"]
                logger.info(f"Successfully received response from OpenRouter on attempt {attempt + 1}")
                return content
                
        except httpx.HTTPStatusError as e:
            logger.error(f"HTTP error occurred: {e.response.status_code} - {e.response.text}")
            if attempt == MAX_RETRIES - 1:
                return None
        except httpx.TimeoutException as e:
            logger.error(f"Timeout error on attempt {attempt + 1}: {e}")
            if attempt == MAX_RETRIES - 1:
                return None
        except Exception as e:
            logger.error(f"Unexpected error on attempt {attempt + 1}: {e}")
            if attempt == MAX_RETRIES - 1:
                return None
    
    return None

async def rewrite_article(article):
    prompt = f"""
–ü–µ—Ä–µ–ø–∏—à–∏ –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –≤ –∂–∏–≤–æ–º, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞.

- –ù–µ —É–ø–æ–º–∏–Ω–∞–π –°–ú–ò, –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —Å—Å—ã–ª–∫–∏, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ ¬´–ø–æ —Å–ª–æ–≤–∞–º¬ª, ¬´—Å–æ–æ–±—â–∞–µ—Ç¬ª, ¬´–∏—Å—Ç–æ—á–Ω–∏–∫¬ª.
- –°–¥–µ–ª–∞–π —è—Ä–∫–∏–π, —Ü–µ–ø–ª—è—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏, –≤—ã–¥–µ–ª–∏ –µ–≥–æ —Ç–µ–≥–æ–º <b>.
- –†–∞–∑–±–µ–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Telegram HTML-—Ç–µ–≥–∏: <b>, <i>, <u>.
- –î–æ–±–∞–≤—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Ñ—Ä–∞–∑—ã, –æ–±—Ä–∞—â–∞–π—Å—è –∫ —á–∏—Ç–∞—Ç–µ–ª—é, –¥–µ–ª–∞–π –≤—ã–≤–æ–¥—ã, –¥–æ–±–∞–≤—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∞–±–∑–∞—Ü (–≤—ã–¥–µ–ª–∏ –µ–≥–æ –∫—É—Ä—Å–∏–≤–æ–º —Å –ø–æ–º–æ—â—å—é <i>).
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å—É—Ö–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –∏–∑–±–µ–≥–∞–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏–µ —Å—Å—ã–ª–∫–∏, –∏–º–µ–Ω–∞ –°–ú–ò, –∏–º–µ–Ω–∞ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–æ–≤, –¥–∞—Ç—ã, –≥–µ–æ–º–µ—Ç–∫–∏.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏, —Ç–æ–ª—å–∫–æ –∞–±–∑–∞—Ü—ã.
- –ù–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –≤–Ω–µ —Å–∞–º–æ–π –Ω–æ–≤–æ—Å—Ç–∏.

–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
<b>üî• –Ø—Ä–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏!</b>

–ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü ‚Äî –∫—Ä–∞—Ç–∫–æ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ —Å—É—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏.

–í—Ç–æ—Ä–æ–π –∞–±–∑–∞—Ü ‚Äî –¥–µ—Ç–∞–ª–∏, –º–Ω–µ–Ω–∏—è, —ç–º–æ—Ü–∏–∏.

–¢—Ä–µ—Ç–∏–π –∞–±–∑–∞—Ü ‚Äî —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è, –≤—ã–≤–æ–¥—ã, –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —á–∏—Ç–∞—Ç–µ–ª—é.

<i>–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∞—è –∏–ª–∏ –æ–±–Ω–∞–¥—ë–∂–∏–≤–∞—é—â–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª–µ–π.</i>

–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Telegram HTML-—Ç–µ–≥–∏!

–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:
{article['content']}
"""
    
    messages = [{"role": "system", "content": prompt}]
    result = await _call_openrouter(messages, timeout=60)
    
    if result == 'RATE_LIMIT_429':
        logger.error(f"Error in rewrite_article: Rate limit exceeded")
        return 'RATE_LIMIT_429'
    
    if result:
        logger.info("Successfully received rewritten article from OpenRouter.")
    else:
        logger.error("Failed to rewrite article after all retries")
    
    return result

async def format_article(text):
    prompt = f"""
–ü—Ä–æ–≤–µ—Ä—å –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram-–∫–∞–Ω–∞–ª–µ:

- –°–æ—Ö—Ä–∞–Ω–∏ —è—Ä–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏, –≤—ã–¥–µ–ª–∏ –µ–≥–æ —Ç–µ–≥–æ–º <b>.
- –†–∞–∑–¥–µ–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è.
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Telegram HTML-—Ç–µ–≥–∏: <b>, <i>, <u>.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏, –∏–º–µ–Ω–∞ –°–ú–ò, –¥–∞—Ç—ã, –≥–µ–æ–º–µ—Ç–∫–∏, —Å–ø–∏—Å–∫–∏.
- –ù–µ –º–µ–Ω—è–π —Å–º—ã—Å–ª, —Å—Ç–∏–ª—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ.
- –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é –∏–ª–∏ –æ–±–Ω–∞–¥—ë–∂–∏–≤–∞—é—â—É—é —Ñ—Ä–∞–∑—É, –≤—ã–¥–µ–ª–∏ –µ—ë –∫—É—Ä—Å–∏–≤–æ–º —Å –ø–æ–º–æ—â—å—é <i>.

–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram-–∫–∞–Ω–∞–ª–µ.

–¢–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
{text}
"""
    
    messages = [{"role": "system", "content": prompt}]
    result = await _call_openrouter(messages, timeout=60)
    
    if result == 'RATE_LIMIT_429':
        logger.error(f"Error in format_article: Rate limit exceeded")
        return 'RATE_LIMIT_429'
    
    if result:
        logger.info("Successfully received formatted article from OpenRouter.")
    else:
        logger.error("Failed to format article after all retries")
    
    return result

def validate_telegram_html(text):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–µ–≥–∏ Telegram
    tag_pattern = re.compile(r"<(/?)([a-zA-Z0-9\-]+)(?: [^>]*)?>")
    for match in tag_pattern.finditer(text):
        tag = match.group(2).lower()
        if tag not in TELEGRAM_ALLOWED_TAGS:
            logger.warning(f"Validation failed: unsupported HTML tag <{tag}> found.")
            return False
    logger.info("HTML validation successful.")
    return True 