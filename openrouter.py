import asyncio
import logging
import re

import httpx
from config import OPENROUTER_API_KEY, MODEL, PROMPT_STYLE

logger = logging.getLogger(__name__)

TELEGRAM_ALLOWED_TAGS = {"b", "i", "u", "s", "code", "a", "tg-spoiler"}


async def _call_openrouter(messages, timeout=60):
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}", "Content-Type": "application/json"}
    data = {"model": MODEL, "messages": messages}
    async with httpx.AsyncClient() as client:
        try:
            logger.info(f"Sending request to OpenRouter model: {MODEL}")
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                json=data,
                headers=headers,
                timeout=timeout,
            )
            response.raise_for_status()
            content = response.json()["choices"][0]["message"]["content"]
            logger.info("Successfully received response from OpenRouter.")
            return content
        except httpx.HTTPStatusError as e:
            logger.error(f"HTTP error occurred: {e.response.status_code} - {e.response.text}")
            raise
        except Exception as e:
            logger.error(f"An error occurred while calling OpenRouter: {e}")
            raise


async def rewrite_article(article):
    prompt = f"""
–ü–µ—Ä–µ–ø–∏—à–∏ –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –≤ –∂–∏–≤–æ–º, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞.

- –ù–µ —É–ø–æ–º–∏–Ω–∞–π –°–ú–ò, –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —Å—Å—ã–ª–∫–∏, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ ¬´–ø–æ —Å–ª–æ–≤–∞–º¬ª, ¬´—Å–æ–æ–±—â–∞–µ—Ç¬ª, ¬´–∏—Å—Ç–æ—á–Ω–∏–∫¬ª.
- –°–¥–µ–ª–∞–π —è—Ä–∫–∏–π, —Ü–µ–ø–ª—è—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏, –≤—ã–¥–µ–ª–∏ –µ–≥–æ —Ç–µ–≥–æ–º <b>.
- –†–∞–∑–±–µ–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Telegram HTML-—Ç–µ–≥–∏: <b>, <i>, <u>.
- –î–æ–±–∞–≤—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Ñ—Ä–∞–∑—ã, –æ–±—Ä–∞—â–∞–π—Å—è –∫ —á–∏—Ç–∞—Ç–µ–ª—é, –¥–µ–ª–∞–π –≤—ã–≤–æ–¥—ã, –¥–æ–±–∞–≤—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∞–±–∑–∞—Ü (–≤—ã–¥–µ–ª–∏ –µ–≥–æ –∫—É—Ä—Å–∏–≤–æ–º —Å –ø–æ–º–æ—â—å—é <i>).
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å—É—Ö–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –∏–∑–±–µ–≥–∞–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏–µ —Å—Å—ã–ª–∫–∏, –∏–º–µ–Ω–∞ –°–ú–ò, –∏–º–µ–Ω–∞ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–æ–≤, –¥–∞—Ç—ã, –≥–µ–æ–º–µ—Ç–∫–∏.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏, —Ç–æ–ª—å–∫–æ –∞–±–∑–∞—Ü—ã.
- –ù–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –≤–Ω–µ —Å–∞–º–æ–π –Ω–æ–≤–æ—Å—Ç–∏.

–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
<b>üî• –Ø—Ä–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏!</b>

–ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü ‚Äî –∫—Ä–∞—Ç–∫–æ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ —Å—É—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏.

–í—Ç–æ—Ä–æ–π –∞–±–∑–∞—Ü ‚Äî –¥–µ—Ç–∞–ª–∏, –º–Ω–µ–Ω–∏—è, —ç–º–æ—Ü–∏–∏.

–¢—Ä–µ—Ç–∏–π –∞–±–∑–∞—Ü ‚Äî —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è, –≤—ã–≤–æ–¥—ã, –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —á–∏—Ç–∞—Ç–µ–ª—é.

<i>–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∞—è –∏–ª–∏ –æ–±–Ω–∞–¥—ë–∂–∏–≤–∞—é—â–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª–µ–π.</i>

–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Telegram HTML-—Ç–µ–≥–∏!

–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:
{article['content']}
"""
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}", "Content-Type": "application/json"}
    data = {"model": MODEL, "messages": [{"role": "system", "content": prompt}]}
    async with httpx.AsyncClient() as client:
        try:
            logger.info(f"Sending request to OpenRouter model: {MODEL}")
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                json=data,
                headers=headers,
                timeout=60,
            )
            response.raise_for_status()
            content = response.json()["choices"][0]["message"]["content"]
            logger.info("Successfully received rewritten article from OpenRouter.")
            return content
        except httpx.HTTPStatusError as e:
            if e.response.status_code == 429:
                logger.error(f"Error in rewrite_article: Client error '429 Too Many Requests' for url '{e.request.url}'")
                return 'RATE_LIMIT_429'
            logger.error(f"HTTP error occurred: {e.response.status_code} - {e.response.text}")
            return None
        except Exception as e:
            logger.error(f"Error in rewrite_article: {e}")
            return None


async def format_article(text):
    prompt = (
        """
–ü—Ä–æ–≤–µ—Ä—å –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram-–∫–∞–Ω–∞–ª–µ:

- –°–æ—Ö—Ä–∞–Ω–∏ —è—Ä–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏, –≤—ã–¥–µ–ª–∏ –µ–≥–æ —Ç–µ–≥–æ–º <b>.
- –†–∞–∑–¥–µ–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è.
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Telegram HTML-—Ç–µ–≥–∏: <b>, <i>, <u>.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏, –∏–º–µ–Ω–∞ –°–ú–ò, –¥–∞—Ç—ã, –≥–µ–æ–º–µ—Ç–∫–∏, —Å–ø–∏—Å–∫–∏.
- –ù–µ –º–µ–Ω—è–π —Å–º—ã—Å–ª, —Å—Ç–∏–ª—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ.
- –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é –∏–ª–∏ –æ–±–Ω–∞–¥—ë–∂–∏–≤–∞—é—â—É—é —Ñ—Ä–∞–∑—É, –≤—ã–¥–µ–ª–∏ –µ—ë –∫—É—Ä—Å–∏–≤–æ–º —Å –ø–æ–º–æ—â—å—é <i>.

–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram-–∫–∞–Ω–∞–ª–µ.

–¢–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
""" + text
    )
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}", "Content-Type": "application/json"}
    data = {"model": MODEL, "messages": [{"role": "system", "content": prompt}]}
    async with httpx.AsyncClient() as client:
        try:
            logger.info("Preparing to format article...")
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                json=data,
                headers=headers,
                timeout=60,
            )
            response.raise_for_status()
            content = response.json()["choices"][0]["message"]["content"]
            logger.info("Successfully received response from OpenRouter.")
            return content
        except Exception as e:
            logger.error(f"Error in format_article: {e}")
            return None


def validate_telegram_html(text):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–µ–≥–∏ Telegram
    tag_pattern = re.compile(r"<(/?)([a-zA-Z0-9\-]+)(?: [^>]*)?>")
    for match in tag_pattern.finditer(text):
        tag = match.group(2).lower()
        if tag not in TELEGRAM_ALLOWED_TAGS:
            logger.warning(f"Validation failed: unsupported HTML tag <{tag}> found.")
            return False
    logger.info("HTML validation successful.")
    return True 